<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安全 DNS (DoH/DoT)</title>
      <link href="/2020/08/07/dns-encryption-explained/"/>
      <url>/2020/08/07/dns-encryption-explained/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么-DNS-需要额外的安全层？"><a href="#为什么-DNS-需要额外的安全层？" class="headerlink" title="为什么 DNS 需要额外的安全层？"></a>为什么 DNS 需要额外的安全层？</h2><p>DNS 是互联网的电话簿；DNS 解析器将人类可读的域名转换为机器可读的 IP 地址。默认情况下，DNS 查询和响应以明文形式（通过 UDP 发送，这意味着它们可以被网络、ISP 或任何能够监视传输的人读取。即使网站使用 HTTPS，也会显示导航到该网站所需的 DNS 查询。</p><p>这种隐私上的欠缺对安全有着巨大影响，在某些情况下也会影响人权；如果 DNS 查询不是私密的，则政府可以更轻松地审查互联网，而不良行为者也可以跟踪用户的网上行为。</p><p>未经加密的普通 DNS 查询可以比作通过邮件发送的明信片：处理邮件的任何人都可能瞥见背面写的文字，因此邮寄包含敏感或私密信息的明信片不是明智的做法。</p><p>基于TLS 的 DNS 和基于 HTTPS 的 DNS 是为加密明文 DNS 流量而开发的两个标准，可以防止恶意方、广告商、ISP 和其他人解读其数据。继续上面的比喻，这些标准的目的是将邮寄的明信片放在信封内，以便任何人都可以寄送明信片，而不必担心有人窥探到明信片的内容。</p><p><img src="dns-traffic-over-tls-https.svg" alt="基于 TLS 的 DNS"></p><h2 id="什么是基于-TLS-的-DNS？"><a href="#什么是基于-TLS-的-DNS？" class="headerlink" title="什么是基于 TLS 的 DNS？"></a>什么是基于 TLS 的 DNS？</h2><p>基于 TLS 的 DNS 或 DoT 是加密 DNS 查询以确保其安全和私密的一项标准。DoT 使用安全协议 TLS，这与 HTTPS 网站用来加密和认证通信的协议相同。（TLS 也称为 SSL。DoT 在用于 DNS 查询的用户数据报协议（UDP）的基础上添加了 TLS 加密。此外，它确保 DNS 请求和响应不会被中间人攻击篡改或伪造。</p><h2 id="什么是基于-HTTPS-的-DNS？"><a href="#什么是基于-HTTPS-的-DNS？" class="headerlink" title="什么是基于 HTTPS 的 DNS？"></a>什么是基于 HTTPS 的 DNS？</h2><p>基于 HTTPS 的 DNS 或 DoH 是 DoT 的替代标准。使用 DoH 时，DNS 查询和响应会得到加密，但它们是通过 HTTP或 HTTP/2 协议发送，而不是直接通过 UDP 发送。与 DoT 一样，DoH 也能确保攻击者无法伪造或篡改 DNS 流量。从网络管理员角度来看，DoH 流量表现为与其他 HTTPS 流量一样，如普通用户与网站和 Web 应用进行的交互。</p><h2 id="等等，HTTPS-不也是将-TLS-用于加密的？基于-HTTPS-的-DNS-和基于-TLS-的-DNS-有何区别？"><a href="#等等，HTTPS-不也是将-TLS-用于加密的？基于-HTTPS-的-DNS-和基于-TLS-的-DNS-有何区别？" class="headerlink" title="等等，HTTPS 不也是将 TLS 用于加密的？基于 HTTPS 的 DNS 和基于 TLS 的 DNS 有何区别？"></a>等等，HTTPS 不也是将 TLS 用于加密的？基于 HTTPS 的 DNS 和基于 TLS 的 DNS 有何区别？</h2><p>这两项标准都是单独开发的，并且各有各的 RFC* 文档，但 DoT 和 DoH 之间最重要的区别是它们使用的端口。DoT 仅使用端口 853，DoH 则使用端口 443，后者也是所有其他HTTPS 流量使用的端口。</p><p>由于 DoT 具有专用端口，因此即使请求和响应本身都已加密，具有网络可见性的任何人都发现来回的 DoT 流量。DoH 则相反，DNS 查询和响应在某种程度上伪装在其他 HTTPS 流量中，因为它们都是从同一端口进出的。</p><p><em>* RFC 代表“征求意见”，RFC 是开发人员、网络专家和思想领袖为标准化互联网技术或协议而进行的集体尝试。</em></p><h2 id="什么是端口？"><a href="#什么是端口？" class="headerlink" title="什么是端口？"></a>什么是端口？</h2><p>在网络中，端口是计算机上的虚拟位置，开放给来自其他计算机的连接。每台联网计算机都有标准数量的端口，并且每个端口都保留用于特定类型的通信。</p><p>这可以比作港口中船舶的泊位：每个运输泊位都有编号，不同种类的船舶应该要前往特定的运输泊位来卸货或下客。网络中同样如此：某些类型的通信应该前往特定的网络端口。区别在于网络端口是虚拟的；它们是用于数字连接而非物理连接的地方。</p><h2 id="DoT-和-DoH-哪个更好？"><a href="#DoT-和-DoH-哪个更好？" class="headerlink" title="DoT 和 DoH 哪个更好？"></a>DoT 和 DoH 哪个更好？</h2><p>这有待商榷。从网络安全的角度来看，DoT 可以说是更好的。它使网络管理员能够监视和阻止 DNS 查询，这对于识别和阻止恶意流量非常重要。另一方面，DoH 查询隐藏在常规 HTTPS 流量中；这意味着，若不阻止所有其他 HTTPS 流量，很难阻止它们。</p><p>但从隐私角度来看，DoH 可以说是更可取的。使用 DoH 时，DNS 查询隐藏在较大的 HTTPS 流量中。这削弱了网络管理员的可见性，但增强了用户的隐私性。</p><h2 id="基于-TLS-HTTPS-DNS-和-DNSSEC-之间有何区别？"><a href="#基于-TLS-HTTPS-DNS-和-DNSSEC-之间有何区别？" class="headerlink" title="基于 TLS/HTTPS DNS 和 DNSSEC 之间有何区别？"></a>基于 TLS/HTTPS DNS 和 DNSSEC 之间有何区别？</h2><p>DNSSEC 是一组安全扩展，用于验证与DNS 解析器通信时DNS 根服务器和权威名称服务器的身份。它旨在防止<em>DNS 缓存中毒</em>以及其他攻击，不会加密通信。另一方面，基于 TLS 或 HTTPS 的 DNS 会对 DNS 查询进行加密。</p><h2 id="可用提供商"><a href="#可用提供商" class="headerlink" title="可用提供商"></a>可用提供商</h2><p>*因为众所周知的原因,境外服务的速度会有较大影响</p><ul><li><a href="https://alidns.com/" target="_blank" rel="noopener">AlibabaDNS</a></li><li><a href="https://www.dnspod.cn/Products/Public.DNS" target="_blank" rel="noopener">Tencent DNSPOD</a> (2020.8.1 服务仍在有限公测,未public)</li></ul>]]></content>
      
      
      <categories>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
            <tag> DoH </tag>
            
            <tag> DoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS font-family</title>
      <link href="/2020/08/07/font-family/"/>
      <url>/2020/08/07/font-family/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>翻来覆去几回，还是觉得 <a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">hexo-theme-cactus</a> 这款主题 简洁，干净的风格深得我心，或许是年纪大了吧。</p><p>但是这款主题的开发者不是国人，没有做中文适配，各大浏览器默认显示的是宋体阅读体验相当差，所以</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在Windows下可选项不多，基本就宋体和微软雅黑，但是微软雅黑字号大了之后阅读体验就过山车般的下降</p><ul><li><strong>宋体（SimSun）</strong>：Win下大部分游览器的默认字体，<code>宋体</code>在小字号下（如12px、14px）的显示效果还可以接受，但是字号一大就非常糟糕了，所以使用的时候要注意。</li><li><strong>微软雅黑（”Microsoft Yahei”）</strong>：从 Vista 开始，微软提供了这款新的字体，一款无衬线的黑体类字体，并且拥有 <em>Regular<em>、</em>Bold</em> 两种粗细的字重，显著提高了字体的显示效果。现在这款字体已经成为Windows游览器中最值得使用的中文字体。从Win8开始，<code>微软雅黑</code>又加入了 <em>Light</em> 这款更细的字重，对于喜欢细字体的设计、开发人员又多了一个新的选择。</li><li><strong>Arial</strong>：Win平台上默认的无衬线西文字体（为什么要说英文字体后面会解释），有多种变体，显示效果一般。</li><li><strong>Tahoma</strong>：十分常见的无衬线字体，被采用为Windows 2000、Windows XP、Windows Server 2003及Sega游戏主机Dreamcast等系统的预设字型，显示效果比<code>Arial</code>要好。</li><li><strong>Verdana</strong>：无衬线字体，优点在于它在小字上仍结构清晰端整、阅读辨识容易。</li><li><strong>其他</strong>：Windows 下默认字体列表：微软官网、维基百科、Office字体</li><li><strong>结论：<code>微软雅黑</code>为Win平台上最值得选择的中文字体，但非游览器默认，需要设置；西文字体的选择以<code>Arial</code>、<code>Tahoma</code>等无衬线字体为主。</strong></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><p><strong>文泉驿点阵宋体</strong>：类似<code>宋体</code>的衬线字体，一般不推荐使用。</p></li><li><p><strong>文泉驿微米黑</strong>：几乎是 Linux 社区现有的最佳简体中文字体。</p></li></ul><h3 id="macOS-amp-iOS"><a href="#macOS-amp-iOS" class="headerlink" title="macOS &amp; iOS"></a>macOS &amp; iOS</h3><p><strong>华文黑体（STHeiti）、华文细黑（STXihei）</strong>：属于同一字体家族系列，OS X 10.6 之前的简体中文系统界面默认字体，也是目前Chrome游览器下的默认字体，有 <em>Regular</em> 和 <em>Bold</em> 两个字重，显示效果可以接受，<code>华文细黑</code>也曾是我最喜欢的字体之一。</p><p><strong>黑体-简（Heiti SC）</strong>：从 10.6 开始，<code>黑体-简</code>代替<code>华文黑体</code>用作简体中文系统界面默认字体，苹果生态最常用的字体之一，包括iphone、iPad等设备用的也是这款字体，显示效果不错，但是喇叭口设计遭人诟病。</p><p><strong>冬青黑体（ Hiragino Sans GB ）</strong>：听说又叫<code>苹果丽黑</code>，日文字体<code>Hiragino KakuGothic</code>的简体中文版，简体中文有 <em>常规体</em> 和 <em>粗体</em> 两种，<code>冬青黑体</code>是一款清新的专业印刷字体，小字号时足够清晰，拥有很多人的追捧。</p><p><strong>Times New Roman</strong>：Mac平台Safari下默认的字体，是最常见且广为人知的西文衬线字体之一，众多网页浏览器和文字处理软件都是用它作为默认字体。</p><p><strong>Helvetica、Helvetica Neue</strong>：一种被广泛使用的传奇般的西文字体（这货还有专门的记录片呢），在微软使用山寨货的<code>Arial</code>时，乔布斯却花费重金获得了<code>Helvetica</code>苹果系统上的使用权，因此该字体也一直伴随着苹果用户，是苹果生态中最常用的西文字体。<code>Helvetica Neue</code>为<code>Helvetica</code>的改善版本，且增加了更多不同粗细与宽度的字形，共拥有51种字体版本，极大的满足了日常的使用。</p><p><strong>苹方（PingFang SC）</strong>：在Mac OS X EL Capitan上，苹果为中国用户打造了一款全新中文字体–<code>苹方</code>，去掉了为人诟病的喇叭口，整体造型看上去更加简洁，字族共六枚字体：<em>极细体、纤细体、细体、常规体、中黑体、中粗体</em>。</p><p><strong>San Francisco</strong>：同样是Mac OS X EL Capitan上最新发布的西文字体，感觉和<code>Helvetica</code>看上去差别不大，目前已经应用在Mac OS 10.11+、<a href="http://caibaojian.com/t/ios" target="_blank" rel="noopener">ios</a> 9.0+、watch OS等最新系统上。</p><p><strong>其他</strong>：Mac下默认字体列表：苹果官网、维基百科</p><p><strong>iOS</strong>:  *iOS系统的字体和Mac OS系统的字体相同，保证了Mac上的字体效果，iOS设备就没有太大问题。</p><p><strong>结论：目前<code>苹方</code>和<code>San Francisco</code>为苹果推出的最新字体，显示效果也最为优雅，但只有最新系统才能支持，而<code>黑体-简</code>和<code>Helvetica</code>可以获得更多系统版本支持，显示效果也相差无几，可以接受。</strong></p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p><strong>Droid Sans、Droid Sans Fallback</strong>：<code>Droid Sans</code>为安卓系统中默认的西文字体，是一款人文主义无衬线字体，而<code>Droid Sans Fallback</code>则是包含汉字、日文假名、韩文的文字扩展支持。</p><p><strong>结论：<code>Droid Sans</code>为默认的字体，并结合了中英文，无需单独设置。</strong></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="1-字体的中英文写法"><a href="#1-字体的中英文写法" class="headerlink" title="1. 字体的中英文写法"></a>1. 字体的中英文写法</h3><p>我们在操作系统中常常看到<code>宋体</code>、<code>微软雅黑</code>这样的字体名称，但实际上这只是字体的显示名称，而不是字体文件的名称，一般字体文件都是用英文命名的，如<code>SimSun</code>、<code>Microsoft Yahei</code>。在大多数情况下直接使用显示名称也能正确的显示，但是有一些用户的特殊设置会导致中文声明无效。<br> <strong>因此，保守的做法是使用字体的字体名称（英文）或者两者兼写。</strong>如下示例：<a href="http://caibaojian.com/font-family.html" target="_blank" rel="noopener">·</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-family: STXihei, &quot;Microsoft YaHei&quot;;</span><br><span class="line">font-family: STXihei, &quot;华文细黑&quot;, &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;;</span><br></pre></td></tr></table></figure><h3 id="2-声明英文字体"><a href="#2-声明英文字体" class="headerlink" title="2. 声明英文字体"></a>2. 声明英文字体</h3><p>绝大部分中文字体里都包含英文字母和数字，不进行英文字体声明是没有问题的，但是大多数中文字体中的英文和数字的部分都不是特别漂亮，所以建议也对英文字体进行声明。<br><strong>由于英文字体中大多不包含中文，我们可以先进行英文字体的声明，这样不会影响到中文字体的选择，因此优先使用最优秀的英文字体，中文字体声明则紧随其次。</strong>如下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: Arial, &quot;Microsoft YaHei&quot;;</span><br></pre></td></tr></table></figure><h3 id="3-照顾不同的操作系统"><a href="#3-照顾不同的操作系统" class="headerlink" title="3. 照顾不同的操作系统"></a>3. 照顾不同的操作系统</h3><ul><li>英文、数字部分：在默认的操作系统中，Mac和Win都会带有<code>Arial</code>, <code>Verdana</code>, <code>Tahoma</code>等几个预装字体，从显示效果来看，<code>Tahoma</code>要比<code>Arial</code>更加清晰一些，因此字体设置<code>Tahoma</code>最好放到前面，当找不到<code>Tahoma</code>时再使用<code>Arial</code>；而在Mac中，还拥有一款更加漂亮的<code>Helvetica</code>字体，所以为了照顾Mac用户有更好的体验，应该更优先设置<code>Helvetica</code>字体；Android系统下默认的无衬线字体就可以接受，因此无需单独设置。<strong>最后，英文、数字字体的最佳写法如下：</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: Helvetica, Tahoma, Arial;</span><br></pre></td></tr></table></figure><ul><li>中文部分：在Win下，<code>微软雅黑</code>为大部分人最常使用的中文字体，由于很多人安装Office的缘故，Mac电脑中也会出现微软雅黑字体，因此把显示效果不错的<code>微软雅黑</code>加入到字体列表是个不错的选择；同样，为了保证Mac中更为优雅字体<code>苹方（PingFang SC）</code>、<code>黑体-简（Heiti SC）</code>、<code>冬青黑体（ Hiragino Sans GB ）</code>的优先显示，需要把这些字体放到中文字体列表的最前面；同时为了照顾到Linux操作系统的体验，还需要添加<code>文泉驿微米黑</code>字体。<strong>最后，中文字体部分最佳写法如下：</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Heiti SC&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;;</span><br></pre></td></tr></table></figure><p><strong>中英文整合写法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-family: Helvetica, Tahoma, Arial, &quot;Heiti SC&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;;</span><br><span class="line">font-family: Helvetica, Tahoma, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Heiti SC&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;;</span><br></pre></td></tr></table></figure><h3 id="4-注意向下兼容"><a href="#4-注意向下兼容" class="headerlink" title="4. 注意向下兼容"></a>4. 注意向下兼容</h3><p>如果还需要考虑旧版本操作系统用户的话，不得不加上一些旧版操作系统存在的字体：Mac中的<code>华文黑体</code>、<code>冬青黑体</code>，Win中的<code>黑体</code>等。<strong>同样按照显示效果排列在列表后面，写法如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: Helvetica, Tahoma, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Heiti SC&quot;, STXihei, &quot;Microsoft YaHei&quot;, SimHei, &quot;WenQuanYi Micro Hei&quot;;</span><br></pre></td></tr></table></figure><p>加入了<code>STXihei（华文细黑）</code>和<code>SimHei（黑体）</code>。</p><h3 id="5-补充字体族名称"><a href="#5-补充字体族名称" class="headerlink" title="5. 补充字体族名称"></a>5. 补充字体族名称</h3><p>字体族大体上分为两类：<code>sans-serif（无衬线体）</code>和<code>serif（衬线体）</code>，当所有的字体都找不到时，我们可以使用字体族名称作为操作系统最后选择字体的方向。一般非衬线字体在显示器中的显示效果会比较好，<strong>因此我们需要在最后添加<code>sans-serif</code>，写法如下：</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: Helvetica, Tahoma, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Heiti SC&quot;, &quot;MicrosoftYaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;</span><br></pre></td></tr></table></figure><h2 id="实践-1"><a href="#实践-1" class="headerlink" title="实践 *"></a>实践 *</h2><h3 id="mi-com"><a href="#mi-com" class="headerlink" title="mi.com"></a>mi.com</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14px&#x2F;1.5 Helvetica Neue,Helvetica,Arial,Microsoft Yahei,Hiragino Sans GB,Heiti SC,WenQuanYi Micro Hei,sans-serif;</span><br></pre></td></tr></table></figure><h3 id="juejin-im"><a href="#juejin-im" class="headerlink" title="juejin.im"></a>juejin.im</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: -apple-system,system-ui,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Arial;</span><br></pre></td></tr></table></figure><h3 id="cnodejs-org"><a href="#cnodejs-org" class="headerlink" title="cnodejs.org"></a>cnodejs.org</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-family: &quot;Helvetica Neue&quot;,&quot;Luxi Sans&quot;,&quot;DejaVu Sans&quot;,Tahoma,&quot;Hiragino Sans GB&quot;,STHeiti,sans-serif!important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v2ex-com"><a href="#v2ex-com" class="headerlink" title="v2ex.com"></a>v2ex.com</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, &quot;Segoe UI&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, sans-serif;</span><br></pre></td></tr></table></figure><h3 id="segmentfault-com"><a href="#segmentfault-com" class="headerlink" title="segmentfault.com"></a>segmentfault.com</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: -apple-system,&quot;Helvetica Neue&quot;,Helvetica,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;WenQuanYi Micro Hei&quot;,&quot;Microsoft Yahei&quot;,sans-serif;</span><br></pre></td></tr></table></figure><p>参考</p><ul><li><a href="http://caibaojian.com/font-family.html" target="_blank" rel="noopener">http://caibaojian.com/font-family.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> font-family </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网是如何工作的</title>
      <link href="/2020/08/07/how-does-the-internet-work/"/>
      <url>/2020/08/07/how-does-the-internet-work/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是互联网"><a href="#什么是互联网" class="headerlink" title="什么是互联网"></a>什么是互联网</h2><p>在探讨互联网是什么之前，我们必须清楚什么是“网络”。网络是一组彼此连接并能够相互发送数据的计算机。计算机网络很像一个社交圈，即一群互相认识、定期交换信息并共同协调活动的人。</p><p>互联网是相互连接、规模庞大且连绵不绝的网络集合。实际上，“互联网”一词源于这样一个概念：<em>相互</em>连接的<em>网络</em>。</p><p>由于网络内的计算机相互连接，并且这些网络也都相互连接，因此通过互联网，一台计算机可以与远方网络中的另一台计算机通信。这样，使得世界各地的计算机之间快速交换信息成为可能。</p><p>计算机通过线缆、无线电波和其他类型的网络基础设施相互连接并与互联网连接。通过互联网发送的所有数据都被转换为光或电脉冲（也称为“位”），然后由接收计算机进行解释。线缆和无线电波以光速传导这些位。一次可以越过这些线缆的位数越多，互联网的运行速度就越快。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>要了解Internet，可以将其视为具有两个主要组件的系统。这些组件中的第一个是<strong>硬件</strong>。包括从每秒传输信息的电缆到坐在您面前的计算机的所有内容。</p><p>支持Internet的其他类型的硬件包括<em>路由器</em>，<em>交换机</em>，<em>服务器</em>，<em>基站</em>，<em>卫星</em>，<em>无线电</em>，<em>智能手机</em>和其他设备。所有这些设备共同构成了网络。互联网是可延展的系统-随着元素加入和离开世界各地的网络，互联网几乎没有变化。这些元素中的某些元素可能保持相当静态，并构成Internet的骨干。其他则更为外围。</p><p>Internet的第二个组成部分：协议，所有这些硬件都无法创建网络。<strong>协议</strong>是计算机完成任务所遵循的规则集。如果连接到Internet的所有计算机没有都必须遵循的一组通用协议，则设备之间的通信将无法进行。各种机器将无法相互理解，甚至无法以有意义的方式发送信息。协议为机器提供了用于传输数据的方法和通用语言。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>互联网运作的基本原理包含两个主要概念：<em>数据包</em>和<em>协议</em>。</p><h3 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h3><p>在网络中，数据包是较大消息的一小部分。每个数据包都包含数据和有关该数据的信息。有关数据包内容的信息称为“标头”，它位于数据包的最前面，以便接收方机器知道如何处理数据包。若要了解数据包标头的用途，可以想一下某些消费类产品是如何随附组装说明的。</p><p>当数据通过互联网发送时，它首先分解为较小的数据包，接着转换为位。数据包通过各种网络设备（如路由器和交换机）路由到其目的地。当数据包到达目的地时，接收设备会按顺序重组数据包，然后可以使用或显示数据。</p><p>这个过程可与美国自由女神像的建造进行类比。自由女神像最初是在法国设计和建造的。但是，它尺寸太大，无法装到船上，因此它被分块运送到美国，并附上有关每一块所属位置的说明。收到这些块的工人将它们重新组装成今天矗立在纽约的雕像。</p><p>运送自由女神像花了很长时间，但通过互联网以较小的片段发送数字信息的速度非常快。例如，存储在 Web 服务器上的自由女神像照片可以一次发送一个数据包，跨越整个地球并加载到某人的计算机上，整个过程只需几毫秒。</p><p>数据包使用称为数据包交换的技术通过互联网发送。中间路由器和交换机能够彼此独立地处理数据包，无需考虑其来源或目的地。这是设计使然，没有哪个连接可以独霸网络。如果不进行数据包交换，一次在计算机之间发送数据，那么两台计算机之间的连接可能会在数分钟内占用数条线缆，以及多台路由器交换机。基本上，一次只能有两个人可以使用互联网，而不是像现实中那样人数不限。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>连接两台可能使用不同硬件并运行不同软件的计算机，是互联网缔造者必须解决的主要挑战之一。这需要使用所有连接的计算机都可理解的通信技术，就像在世界上不同地区长大的两个人可能需要说一种通用语言才能互相理解一样。</p><p>这个问题可标准化协议解决。在网络中，协议是执行某些操作和格式化数据的标准化方法，以便两个或更多设备能够相互通信并相互理解。</p><p>协议有多种，用于在同一网络（以太网）上的设备之间发送数据包，在网络之间(IP)发送数据包，确保这些数据包成功按顺序到达（<code>TCP</code>），以及为网站和应用程序格式化数据（<code>HTTP</code>）等。除了这些基本协议之外，还有用于路由、测试和加密的协议。对于不同类型的内容，也有上述协议的替代协议。例如，流视频通常使用 <code>UDP</code>而不是 <code>TCP</code>。</p><p>所有连入互联网的计算机和其他设备都可以解释和理解这些协议，所以无论连接的是什么，互联网都可以正常工作。</p><h2 id="基础硬件"><a href="#基础硬件" class="headerlink" title="基础硬件"></a>基础硬件</h2><p>许多不同种类的硬件和基础设施使互联网能为众人所用。其中一些最重要的类型包括：</p><ul><li>路由器根据目的地将数据包转发到其他计算机网络。路由器就像是互联网上的交通警察，确保互联网流量流向正确的网络。</li><li>交换机连接共享一个网络的多个设备。它们使用数据包交换将数据包转发到正确的设备。它们也从这些设备接收出站数据包，并将它们传递到正确的目的地。</li><li>Web 服务器是特殊的高性能计算机，除了托管应用程序和数据库外，还可以存储内容（网页、图像和视频等）并提供给用户。服务器也响应 DNS 查询并执行其他重要任务，使互联网保持正常运作。大多数服务器都保管在遍布全球的大型数据中心中。</li></ul><h2 id="如何看到这篇文章"><a href="#如何看到这篇文章" class="headerlink" title="如何看到这篇文章"></a>如何看到这篇文章</h2><p>我们以本文为例。为了让您看到这篇文章，它以数千数据包的形式通过互联网逐个片段发送。这些数据包通过线缆和无线电波穿过路由器和交换机，从我们的Web 服务器一路传输到您的计算机或设备。您的计算机或智能手机收到这些数据包，并将它们传递到设备的浏览器，然后浏览器会解释这些数据包中的数据，以显示您正在阅读的文字。</p><p>此过程涉及的具体步骤有：</p><ol><li><strong>DNS 查询：</strong>当您的浏览器开始加载本网页时，首先可能进行 DNS 查询以查找 EVE BLOG 网站的IP地址。</li><li><strong>TCP 握手：</strong>浏览器打开与这个 IP 地址的连接。</li><li><strong>TLS 握手：</strong>浏览器也在 EVE BLOG Web 服务器和您的设备之间设置加密，使攻击者无法读取这两个端点之间传输的数据包。</li><li><strong>HTTP 请求：</strong>浏览器请求此网页上显示的内容。</li><li><strong>HTTP 响应：</strong>EVE BLOG 的服务器以HTML、CSS 和 JavaScript 代码的形式传输内容，并分解为一系列数据包。一旦您的设备接收到数据包并验证已收到所有数据包，浏览器就会解释数据包中包含的 HTML、CSS 和 JavaScript 代码，以呈现有关互联网工作原理的本文。整个过程只需一两秒。</li></ol>]]></content>
      
      
      <categories>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> internet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 HTTP</title>
      <link href="/2020/08/07/hypertext-transfer-protocol-http/"/>
      <url>/2020/08/07/hypertext-transfer-protocol-http/</url>
      
        <content type="html"><![CDATA[<ol><li><ol><li><h2 id="什么是-HTTP？"><a href="#什么是-HTTP？" class="headerlink" title="什么是 HTTP？"></a>什么是 HTTP？</h2></li><li><p>超文本传输协议（HTTP）是万维网的基础，用于通过超文本链接加载网页。HTTP 是应用程序层协议，旨在在联网设备之间传输信息，并在网络协议栈的其他层之上运行。HTTP 上的典型流涉及客户端计算机向服务器发出请求，然后服务器发送响应消息。</p></li><li><h2 id="什么是-HTTP-请求？"><a href="#什么是-HTTP-请求？" class="headerlink" title="什么是 HTTP 请求？"></a>什么是 HTTP 请求？</h2></li><li><p>HTTP 请求是 Internet 通信平台（例如 Web 浏览器）索取其加载网站所需信息的方式。</p></li><li><p>在 Internet 上发出的每个 HTTP 请求都携带一系列编码数据，这些数据带有不同类型的信息。典型的 HTTP 请求包含如下信息：</p></li><li><ol><li>HTTP 版本类型</li><li>URL</li><li>HTTP 方法</li><li>HTTP 请求标头</li><li>可选的 HTTP 正文。</li></ol></li><li><p>我们来更深入地探讨这些请求的工作方式，以及如何使用请求的内容来共享信息。</p></li><li><h4 id="什么是-HTTP-方法？"><a href="#什么是-HTTP-方法？" class="headerlink" title="什么是 HTTP 方法？"></a>什么是 HTTP 方法？</h4></li><li><p>HTTP 方法（有时称为 HTTP 动词）指示 HTTP 请求对所查询服务器的期望操作。例如，最常见的两种 HTTP 方法是“GET”和“POST”。“GET”请求期望返回信息（通常以网站的形式），而“POST”请求通常表示客户端正在向 Web 服务器提交信息（例如表单信息，如提交的用户名和密码）。</p></li><li><h4 id="什么是-HTTP-请求标头？"><a href="#什么是-HTTP-请求标头？" class="headerlink" title="什么是 HTTP 请求标头？"></a>什么是 HTTP 请求标头？</h4></li><li><p>HTTP 标头包含存储在键值对中的文本信息，并且它们包含在每个 HTTP 请求中（以及响应中，详见下文）。这些标头可传达核心信息，如客户端正在使用什么浏览器以及正在请求什么数据。</p></li><li><p>来自 Google Chrome 网络标签页的 HTTP 请求标头示例：</p></li><li><p><img src="hypertext-transfer-protocol-http.assets/http-request-headers.png" alt="HTTP request headers"></p></li><li><h4 id="什么是-HTTP-请求正文？"><a href="#什么是-HTTP-请求正文？" class="headerlink" title="什么是 HTTP 请求正文？"></a>什么是 HTTP 请求正文？</h4></li><li><p>请求正文是包含请求所传输信息的“主体”的部分。HTTP 请求的正文包含正在提交到 Web 服务器的任何信息，例如用户名和密码，或输入到表单中的任何其他数据。</p></li><li><h2 id="HTTP-响应中包含什么？"><a href="#HTTP-响应中包含什么？" class="headerlink" title="HTTP 响应中包含什么？"></a>HTTP 响应中包含什么？</h2></li><li><p>HTTP 响应是 Web 客户端（通常是浏览器）从 Internet 服务器收到的用于响应 HTTP 请求的内容。这些响应根据 HTTP 请求中的要求传达有价值的信息。</p></li><li><p>典型的 HTTP 响应包含：</p></li><li><ol><li><p>HTTP 状态代码</p></li><li><p>HTTP 响应标头</p></li><li><p>可选的 HTTP 正文</p></li><li><p>让我们分解一下：</p></li><li><h4 id="什么是-HTTP-状态代码？"><a href="#什么是-HTTP-状态代码？" class="headerlink" title="什么是 HTTP 状态代码？"></a>什么是 HTTP 状态代码？</h4></li><li><p>HTTP 状态代码是 3 位数代码，最常用于指示 HTTP 请求是否已成功完成。状态代码分为以下 5 个区块：</p></li><li><ol><li><p>1xx 信息性</p></li><li><p>2xx 成功</p></li><li><p>3xx Redirection</p></li><li><p>4xx 客户端错误</p></li><li><p>5xx 服务器错误</p></li><li><p>“xx”表示 00 到 99 之间的不同数字</p></li><li><p>以数字“2”开头的状态代码表示成功。例如，在客户端请求网页后，最常见的响应状态码为“200 OK”，这表示请求已正确完成。</p></li><li><p>如果响应以“4”或“5”开头，则表示存在错误，并且不会显示网页。以“4”开头的状态代码表示客户端错误（在 URL 中打错字时，经常会遇到“404 NOT FOUND”状态代码）。以“5”开头的状态代码表示服务器端出了问题。状态码也可以以“1”或“3”开头，分别表示信息响应和重定向。</p></li><li><h4 id="什么是-HTTP-响应标头？"><a href="#什么是-HTTP-响应标头？" class="headerlink" title="什么是 HTTP 响应标头？"></a>什么是 HTTP 响应标头？</h4></li><li><p>与 HTTP 请求非常相似，HTTP 响应也带有标头，用于传达重要的信息，例如在响应正文中发送的数据的语言和格式。</p></li><li><p>来自 Google Chrome 网络标签页的 HTTP 响应标头示例：</p></li><li><p><img src="hypertext-transfer-protocol-http.assets/http-response-headers.png" alt="HTTP response headers"></p></li><li><h4 id="什么是-HTTP-响应正文？"><a href="#什么是-HTTP-响应正文？" class="headerlink" title="什么是 HTTP 响应正文？"></a>什么是 HTTP 响应正文？</h4></li><li><p>成功回应“GET”请求时，HTTP 响应通常具有包含所请求信息的正文。在大多数 Web 请求中，这是 HTML 数据，Web 浏览器会将其转换为网页。</p></li><li><h2 id="是否可以通过-HTTP-发动-DDoS-攻击？"><a href="#是否可以通过-HTTP-发动-DDoS-攻击？" class="headerlink" title="是否可以通过 HTTP 发动 DDoS 攻击？"></a>是否可以通过 HTTP 发动 DDoS 攻击？</h2></li><li><p>请记住，HTTP 是“无状态”协议，这意味着每个命令都独立于任何其他命令运行。在初始的规范中，HTTP 请求会各自创建并关闭一个 TCP 连接。在更新版本的 HTTP 协议（HTTP 1.1 及更高版本）中，持久连接允许多个 HTTP 请求通过一个持久 TCP 连接传递，从而改善资源消耗。在DoS或 DDoS 攻击中，大量 HTTP 请求可被用于对目标设备发起攻击，并可被视为应用程序层攻击或第 7 层攻击的一部分。</p></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源镜像站 CN</title>
      <link href="/2020/08/07/mirrors-cn/"/>
      <url>/2020/08/07/mirrors-cn/</url>
      
        <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源软件镜像站| Tsinghua Open Source Mirror</a></li><li><a href="http://developer.aliyun.com/mirror" target="_blank" rel="noopener">阿里巴巴开源镜像站-OPSX镜像站-阿里云开发者社区</a></li><li><a href="https://mirrors.huaweicloud.com/" target="_blank" rel="noopener">华为开源镜像站_软件开发服务_华为云</a></li></ul><h2 id="Python-PIP"><a href="#Python-PIP" class="headerlink" title="Python - PIP"></a>Python - PIP</h2><ol><li><p>临时使用</p><ol><li>·pip install –trusted-host <a href="https://mirrors.huaweicloud.com" target="_blank" rel="noopener">https://mirrors.huaweicloud.com</a> -i <a href="https://mirrors.huaweicloud.com/repository/pypi/simple" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/repository/pypi/simple</a><br><some-package>·</li></ol></li><li><p>设为默认</p><ol><li>Pip的配置文件为用户根目录下的：<strong>~/.pip/pip.conf</strong>（Windows路径为：<strong>C:\Users&lt;UserName&gt;\pip\pip.ini</strong>）</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;repository&#x2F;pypi&#x2F;simple</span><br><span class="line">trusted-host &#x3D; mirrors.huaweicloud.com</span><br><span class="line">timeout &#x3D; 120</span><br></pre></td></tr></table></figure><h2 id="PHP-Composer"><a href="#PHP-Composer" class="headerlink" title="PHP - Composer"></a>PHP - Composer</h2><ol><li><p>修改全局配置(推荐)</p><ol><li><code>composer config -g repo.packagist composer https://mirrors.huaweicloud.com/repository/php/</code></li></ol></li><li><p>修改项目配置</p><ol><li><p><code>composer config repo.packagist composer https://mirrors.huaweicloud.com/repository/php/</code></p></li><li><p>手工在<strong>composer.json</strong>中添加如下内容</p><ol><li><pre><code>&quot;repositories&quot;: {    &quot;packagist&quot;: {        &quot;type&quot;: &quot;composer&quot;,        &quot;url&quot;: &quot;https://mirrors.huaweicloud.com/repository/php/&quot;    }}</code></pre></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mirrors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 DNS</title>
      <link href="/2020/08/07/what-is-dns/"/>
      <url>/2020/08/07/what-is-dns/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-DNS？"><a href="#什么是-DNS？" class="headerlink" title="什么是 DNS？"></a>什么是 DNS？</h2><p>域名系统（DNS）是 Internet 的电话簿。人们通过例如 nytimes.com 或 espn.com 等域名在线访问信息。Web 浏览器通过Internet 协议（IP）地址进行交互。DNS 将域名转换为 IP地址，以便浏览器可以加载 Internet 资源。</p><p>连接到 Internet 的每个设备都有一个唯一 IP 地址，其他计算机可使用该 IP 地址查找此设备。DNS 服务器使人们无需存储例如 192.168.1.1（IPv4 中）等 IP 地址或更复杂的较新字母数字 IP 地址，例如 2400:cb00:2048:1::c629:d7a2（IPv6 中）。</p><h2 id="DNS-如何工作？"><a href="#DNS-如何工作？" class="headerlink" title="DNS 如何工作？"></a>DNS 如何工作？</h2><p>DNS 解析过程涉及将主机名（例如 <a href="http://www.example.com）转换为计算机友好的" target="_blank" rel="noopener">www.example.com）转换为计算机友好的</a> IP 地址（例如 192.168.1.1）。Internet 上的每个设备都被分配了一个 IP 地址，必须有该地址才能找到相应的 Internet 设备 - 就像使用街道地址来查找特定住所一样。当用户想要加载网页时，用户在 Web 浏览器中键入的内容（example.com）与查找 example.com 网页所需的机器友好地址之间必须进行转换。</p><p>为理解 DNS 解析过程，务必了解 DNS 查询必须经过的不同硬件组件。对于 Web 浏览器，DNS 查找在“幕后”进行，除了初始请求外，不需要从用户的计算机进行任何交互。</p><h2 id="DNS-查找有哪些步骤？"><a href="#DNS-查找有哪些步骤？" class="headerlink" title="DNS 查找有哪些步骤？"></a>DNS 查找有哪些步骤？</h2><p>大多数情况下，DNS 与正被转换为相应 IP 地址的域名有关。要了解此过程的工作方式，在 DNS 查找从 Web 浏览器经过 DNS 查找过程然后再返回时，跟踪 DNS 查找的路径会有所帮助。我们来看一下这些步骤。</p><p>注意：通常，DNS 查找信息将本地缓存在查询计算机内，或者远程缓存在 DNS 基础设施内。DNS 查找通常有 8 个步骤。缓存 DNS 信息时，将从 DNS 查找过程中跳过一些步骤，从而使该过程更快。以下示例概述了不缓存任何内容时的所有 8 个步骤。</p><h4 id="DNS-查找的-8-个步骤："><a href="#DNS-查找的-8-个步骤：" class="headerlink" title="DNS 查找的 8 个步骤："></a>DNS 查找的 8 个步骤：</h4><ol><li><p>用户在 Web 浏览器中键入 “example.com”，查询传输到 Internet 中，并被 DNS 递归解析器接收。</p></li><li><p>接着，解析器查询 DNS 根域名服务器（.）。</p></li><li><p>然后，根服务器使用存储其域信息的顶级域（TLD）DNS 服务器（例如 .com 或 .net）的地址响应该解析器。在搜索 example.com 时，我们的请求指向 .com TLD。</p></li><li><p>然后，解析器向 .com TLD 发出请求。</p></li><li><p>TLD 服务器随后使用该域的域名服务器 example.com 的 IP 地址进行响应。</p></li><li><p>最后，递归解析器将查询发送到域的域名服务器。</p></li><li><p>example.com 的 IP 地址而后从域名服务器返回解析器。</p></li><li><p>然后 DNS 解析器使用最初请求的域的 IP 地址响应 Web 浏览器。</p></li><li><p>DNS 查找的这 8 个步骤返回 example.com 的 IP 地址后，浏览器便能发出对该网页的请求：</p></li><li><p>浏览器向该 IP 地址发出 HTTP 请求。</p></li><li><p>位于该 IP 的服务器返回将在浏览器中呈现的网页（第 10 步）。</p></li></ol><p><img src="what-is-dns.assets/dns-lookup-diagram.png" alt="DNS query diagram"></p><h2 id="什么是-DNS-解析器？"><a href="#什么是-DNS-解析器？" class="headerlink" title="什么是 DNS 解析器？"></a>什么是 DNS 解析器？</h2><p>DNS 解析器是 DNS 查找的第一站，其负责与发出初始请求的客户端打交道。解析器启动查询序列，最终使 URL 转换为必要的 IP 地址。</p><p>注意：典型的未缓存 DNS 查找将涉及递归查询和迭代查询。</p><p>务必要区分递归 DNS 查询和递归 DNS 解析器。该查询是指向需要解析该查询的 DNS 解析器发出的请求。DNS 递归解析器是一种计算机，其接受递归查询并通过发出必要的请求来处理响应。<img src="what-is-dns.assets/dns-recursive-query.png" alt="DNS query diagram"></p><h2 id="DNS-查询有哪些类型？"><a href="#DNS-查询有哪些类型？" class="headerlink" title="DNS 查询有哪些类型？"></a>DNS 查询有哪些类型？</h2><p>典型 DNS 查找中会出现三种类型的查询。通过组合使用这些查询，优化的 DNS 解析过程可缩短传输距离。在理想情况下，可以使用缓存的记录数据，从而使 DNS 域名服务器能够返回非递归查询。</p><h4 id="3-种-DNS-查询类型："><a href="#3-种-DNS-查询类型：" class="headerlink" title="3 种 DNS 查询类型："></a>3 种 DNS 查询类型：</h4><ol><li><strong>递归查询</strong> - 在递归查询中，DNS 客户端要求 DNS 服务器（一般为 DNS 递归解析器）将使用所请求的资源记录响应客户端，或者如果解析器无法找到该记录，则返回错误消息。</li><li><strong>迭代查询</strong> - 在这种情况下，DNS 客户端将允许 DNS 服务器返回其能够给出的最佳应答。如果所查询的 DNS 服务器与查询名称不匹配，则将返回对较低级别域名空间具有权威性的 DNS 服务器的引用。然后，DNS 客户端将对引用地址进行查询。此过程继续使用查询链中的其他 DNS 服务器，直至发生错误或超时为止。</li><li><strong>非递归查询</strong> - 当 DNS 解析器客户端查询 DNS 服务器以获取其有权访问的记录时通常会进行此查询，因为其对该记录具有权威性，或者该记录存在于其缓存内。DNS 服务器通常会缓存 DNS 记录，以防止更多带宽消耗和上游服务器上的负载。</li></ol><h2 id="什么是-DNS-缓存？DNS-缓存发生在哪里？"><a href="#什么是-DNS-缓存？DNS-缓存发生在哪里？" class="headerlink" title="什么是 DNS 缓存？DNS 缓存发生在哪里？"></a>什么是 DNS 缓存？DNS 缓存发生在哪里？</h2><p>缓存的目的是将数据临时存储在某个位置，从而提高数据请求的性能和可靠性。DNS 缓存涉及将数据存储在更靠近请求客户端的位置，以便能够更早地解析 DNS 查询，并且能够避免在 DNS 查找链中进一步向下的额外查询，从而缩短加载时间并减少带宽/CPU 消耗。DNS 数据可缓存到各种不同的位置上，每个位置均将存储 DNS 记录并保存由生存时间（TTL）决定的一段时间。</p><h4 id="浏览器-DNS-缓存"><a href="#浏览器-DNS-缓存" class="headerlink" title="浏览器 DNS 缓存"></a>浏览器 DNS 缓存</h4><p>现代 Web 浏览器设计为默认将 DNS 记录缓存一段时间。目的很明显；越靠近 Web 浏览器进行 DNS 缓存，为检查缓存并向 IP 地址发出正确请求而必须采取的处理步骤就越少。发出对 DNS 记录的请求时，浏览器缓存是针对所请求的记录而检查的第一个位置。</p><p>在 Chrome 浏览器中，您可以转到 chrome://net-internals/#dns 查看 DNS 缓存的状态。</p><h4 id="操作系统（OS）级-DNS-缓存"><a href="#操作系统（OS）级-DNS-缓存" class="headerlink" title="操作系统（OS）级 DNS 缓存"></a>操作系统（OS）级 DNS 缓存</h4><p>操作系统级 DNS 解析器是 DNS 查询离开您计算机前的第二站，也是本地最后一站。操作系统内旨在处理此查询的过程通常称为“存根解析器”或 DNS 客户端。当存根解析器获取来自某个应用程序的请求时，其首先检查自己的缓存，以便查看是否有此记录。如果没有，则将本地网络外部的 DNS 查询（设置了递归标记）发送到 Internet 服务提供商（ISP）内部的 DNS 递归解析器。</p><p>与先前所有步骤一样，当 ISP 内的递归解析器收到 DNS 查询时，其还将查看所请求的主机到 IP 地址转换是否已经存储在其本地持久性层中。</p><p>根据其缓存中具有的记录类型，递归解析器还具有其他功能：</p><ol><li>如果解析器没有 A记录(在IPv6是 AAAA记录)，但确实有针对权威性域名服务器的 NS 记录，则其将直接查询这些域名服务器，从而绕过 DNS 查询中的几个步骤。此快捷方式可防止从根和 .com 域名服务器（在我们对 example.com 的搜索中）进行查找，并且有助于更快地解析 DNS 查询。</li><li>如果解析器没有 NS 记录，它会向 TLD 服务器（本例中为 .com）发送查询，从而跳过根服务器。</li><li>万一解析器没有指向 TLD 服务器的记录，其将查询根服务器。这种情况通常在清除了 DNS 缓存后发生。</li></ol>]]></content>
      
      
      <categories>
          
          <category> base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
